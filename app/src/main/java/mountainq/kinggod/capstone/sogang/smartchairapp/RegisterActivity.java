package mountainq.kinggod.capstone.sogang.smartchairapp;import android.app.Activity;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.os.AsyncTask;import android.os.Bundle;import android.support.annotation.Nullable;import android.util.Log;import android.view.View;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.Toast;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.IOException;import mountainq.kinggod.capstone.sogang.smartchairapp.HueManager.ThreadHue;import mountainq.kinggod.capstone.sogang.smartchairapp.datas.HueRegisterBody;import mountainq.kinggod.capstone.sogang.smartchairapp.datas.StaticDatas;import mountainq.kinggod.capstone.sogang.smartchairapp.interfaces.HueDeviceControl;import mountainq.kinggod.capstone.sogang.smartchairapp.managers.PropertyManager;import mountainq.kinggod.capstone.sogang.smartchairapp.managers.SocketTaskManager;import okhttp3.MediaType;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.RequestBody;import okhttp3.ResponseBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import retrofit2.Retrofit;/** * Created by dnay2 on 2017-03-19. */public class RegisterActivity extends Activity {    PropertyManager propertyManager = PropertyManager.getInstance();    ProgressDialog progressDialog;    private LinearLayout userRegisterLL, hueFindLL, hueRegisterLL;    private EditText idEdit, pwEdit;    private Animation move_c_l, move_c_r, move_l_c, move_r_c;    private static int CURR_STAGE = R.id.btnRegister;    private Context mContext = this;    private String ipAddress = "default", userName = "default";    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_register);        initialize();        Intent status = getIntent();//        if(status.getStringExtra(StaticDatas.STATUS_CODE).equals(StaticDatas.STATUS_HUE_REGISTER))            moveAnimation(R.id.btnRegister);    }    private void initialize() {        idEdit = (EditText) findViewById(R.id.textId);        pwEdit = (EditText) findViewById(R.id.textPw);        userRegisterLL = (LinearLayout) findViewById(R.id.userRegisterLL);        hueFindLL = (LinearLayout) findViewById(R.id.hueFindLL);        hueRegisterLL = (LinearLayout) findViewById(R.id.hueRegisterLL);        move_c_l = AnimationUtils.loadAnimation(this, R.anim.move_c_l);        move_c_r = AnimationUtils.loadAnimation(this, R.anim.move_c_r);        move_l_c = AnimationUtils.loadAnimation(this, R.anim.move_l_c);        move_r_c = AnimationUtils.loadAnimation(this, R.anim.move_r_c);    }    private void moveAnimation(int viewId) {        switch (viewId) {            case R.id.btnRegister:                CURR_STAGE = R.id.btnHueFind;                userRegisterLL.startAnimation(AnimationUtils.loadAnimation(this, R.anim.move_c_l));                hueFindLL.startAnimation(AnimationUtils.loadAnimation(this, R.anim.move_r_c));                userRegisterLL.setVisibility(View.GONE);                break;            case R.id.btnHueFind:                CURR_STAGE = R.id.btnHueRegister;                hueFindLL.startAnimation(move_c_l);                hueRegisterLL.startAnimation(move_r_c);                hueFindLL.setVisibility(View.GONE);                break;            case R.id.btnHueRegister:                //no change                break;        }    }    private void findHue() {        Retrofit retrofit = new Retrofit.Builder()                .baseUrl(StaticDatas.HUE_IP_URL)                .build();        HueDeviceControl deviceControl = retrofit.create(HueDeviceControl.class);        Call<ResponseBody> response = deviceControl.getIpAddress();        response.enqueue(new Callback<ResponseBody>() {            @Override            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {                if (response.isSuccessful()) {                    String jsonString = "";                    try {                        jsonString = response.body().string();                        Log.d("test", "findHueIp : " + jsonString);                    } catch (IOException e) {                        e.printStackTrace();                    }                    try {                        JSONArray jsonArray = new JSONArray(jsonString);                        JSONObject jsonObject;                        for (int i = 0; i < jsonArray.length(); i++) {                            jsonObject = jsonArray.getJSONObject(i);                            ipAddress = jsonObject.getString("internalipaddress");                            Log.d("ipAddress test",ipAddress);                        }                    } catch (JSONException e) {                        e.printStackTrace();                    }                    if (!ipAddress.equals("default")) {                        moveAnimation(R.id.btnHueFind);                    } else {                        Toast.makeText(RegisterActivity.this, "휴 다바이스를 확인해주세요", Toast.LENGTH_SHORT).show();                    }                }            }            @Override            public void onFailure(Call<ResponseBody> call, Throwable t) {            }        });    }    private void registerHue() {        Retrofit retrofit = new Retrofit.Builder()                .baseUrl(ipAddress)                .build();        HueDeviceControl deviceControl = retrofit.create(HueDeviceControl.class);        HueRegisterBody body = new HueRegisterBody("{"+'"'+"devicetype"+'"'+":"+'"'+"jinu"+'"'+"}");        Call<ResponseBody> response = deviceControl.getUserName(ipAddress, body);        response.enqueue(new Callback<ResponseBody>() {            @Override            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {                if (response.isSuccessful()) {                    String jsonString = "";                    try {                        jsonString = response.body().string();                        Log.d("test", "registerHue : " + jsonString);                    } catch (IOException e) {                        e.printStackTrace();                    }                    try {                        JSONArray jsonArray = new JSONArray(jsonString);                        JSONObject tempObject;                        for (int i = 0; i < jsonArray.length(); i++) {                            tempObject = jsonArray.getJSONObject(i);                            if (tempObject.isNull("success")) {                                // error 일때 휴 누르고 다시 한번 누르도록 유도                                Toast.makeText(RegisterActivity.this, "휴 버튼을 누르고 다시한번 눌러주세요", Toast.LENGTH_SHORT).show();                                ((Button) findViewById(R.id.btnHueRegister)).setText("휴 버튼을 누르고 다시한번 눌러주세요");                            } else {                                // success 일때 다 저장                                userName = tempObject.getJSONObject("success").getString("username");                                propertyManager.setHueIp(ipAddress);                                propertyManager.setHueName(userName);                                Intent intent = new Intent(RegisterActivity.this, MainActivity.class);                                startActivity(intent);                                overridePendingTransition(R.anim.alpha_out, R.anim.alpha_in);                                return;                            }                        }                    } catch (JSONException e) {                        e.printStackTrace();                    }                }            }            @Override            public void onFailure(Call<ResponseBody> call, Throwable t) {            }        });    }    /**     * 라즈베리 파이 등록 지정된 IP주소와 포트번호로 인증된 토큰을 보낸다     *     * @param authenticatedToken 토큰     * @return 성공여부 반환     */    private boolean registerChair(String authenticatedToken) {        boolean flag = false;        long currentTime = System.currentTimeMillis();        SocketTaskManager taskManager = new SocketTaskManager();        taskManager.execute();        taskManager.actionSend(authenticatedToken, 15000);        while (taskManager.isSuccessed() || currentTime + 15000 > System.currentTimeMillis()) {            if (taskManager.isSuccessed())                flag = true;        }        taskManager.disconnection();        return flag;    }    /**     * 버튼 클릭 리스너 XML에 바로 연결되어 있다.     *     * @param v 누른 뷰를 가져온다     */    public void clickBtnListener(View v) {        Log.d("test", "clicked : " + v.getId());        progressStart();        switch (v.getId()) {            case R.id.btnRegister: //회원가입 : 서버로 토큰 전달                Log.d("test", "register");                new UserRegister(idEdit.getText().toString(),                        pwEdit.getText().toString(),                        propertyManager.getPushToken()).execute();                break;            case R.id.btnLogin:                new UserLogin(                        idEdit.getText().toString(),                        pwEdit.getText().toString(),                        propertyManager.getPushToken()).execute();                break;            case R.id.btnHueFind:            //   hue_controller = new hue_contoller();                ThreadHue threadHue = new ThreadHue();                threadHue.start();                //findHue();                break;            case R.id.btnHueRegister:                //registerHue();                break;            default:                break;        }        progressStop();    }    private void progressStart() {        progressDialog = new ProgressDialog(mContext);        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        progressDialog.setMessage("Wait a minute");        progressDialog.show();    }    private void progressStop() {        progressDialog.dismiss();    }    private class UserRegister extends RegisterTask{        private String id, pw, token;        public UserRegister(String id, String pw, String token) {            this.id = id;            this.pw = pw;            this.token = token;        }        @Override        protected Integer doInBackground(Integer... params){            int resultCode = 100;            JSONObject jsonObject = new JSONObject();            try{                jsonObject.put("id", id);                jsonObject.put("pw", pw);                jsonObject.put("token", token);            }catch (JSONException e){                e.printStackTrace();            }            String jsonBody = jsonObject.toString();            try{                String result = postMethod(StaticDatas.CREATE_URL, jsonBody);                if (result != null){                    try{                        JSONObject obj = new JSONObject(result);                        if(obj.getBoolean("success"))                            resultCode = 200;                    }catch (JSONException e){                        e.printStackTrace();                    }                }            }catch (IOException e){                e.printStackTrace();            }            return resultCode;        }        @Override        protected void onPostExecute(Integer integer) {            if(integer == 200)                moveAnimation(R.id.btnRegister);            else                Toast.makeText(RegisterActivity.this, "아이디를 확인해주세요", Toast.LENGTH_SHORT).show();        }    }    private class UserLogin extends RegisterTask{        private String id, pw, token;        public UserLogin(String id, String pw, String token) {            this.id = id;            this.pw = pw;            this.token = token;        }        @Override        protected Integer doInBackground(Integer... params) {            JSONObject jsonObject = new JSONObject();            try{                jsonObject.put("id", id);                jsonObject.put("pw", pw);                jsonObject.put("token", token);            }catch (JSONException e){                e.printStackTrace();            }            String jsonBody = jsonObject.toString();            try{                String result = postMethod(StaticDatas.BASE_URL + StaticDatas.CREATE_URL, jsonBody);                Log.d("test", "result : " + result);            }catch (IOException e){                e.printStackTrace();            }            return super.doInBackground(params);        }    }    private class FindHue extends RegisterTask{        @Override        protected Integer doInBackground(Integer... params) {            return super.doInBackground(params);        }    }    private class RegisterTask extends AsyncTask<Integer, Void, Integer>{        protected final MediaType JSON = MediaType.parse("application/json; charset=utf-8");        protected OkHttpClient client = new OkHttpClient();        @Override        protected Integer doInBackground(Integer... params) {            return null;        }        @Override        protected void onPreExecute() {            Log.d("test", "task running");        }        public String postMethod (String url, String json) throws IOException {            RequestBody body = RequestBody.create(JSON, json);            Request request = new Request.Builder()                    .url(url)                    .header("content-type", "application/json")                    .post(body)                    .build();            Log.d("test", "post request : " + request.body().toString());            okhttp3.Response response = client.newCall(request).execute();            return response.body().string();        }        public String getMethod (String url) throws IOException {            Request request = new Request.Builder()                    .url(url)                    .build();            okhttp3.Response response = client.newCall(request).execute();            return response.body().string();        }        public String putMethod (String url, String header, String jsonBody) throws IOException{            RequestBody body = RequestBody.create(JSON, jsonBody);            Request request = new Request.Builder()                    .url(url)                    .put(body)                    .build();            okhttp3.Response response = client.newCall(request).execute();            return response.body().string();        }    }}